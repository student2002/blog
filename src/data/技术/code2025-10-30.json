{
  "id": 1,
  "title": "MySQL vs Redis vs RocksDB ",
  "author": "muffin",
  "date": "2025-10-30 01:00:00",
  "day": 25,
  "month": "10月",
  "year": "2025",
  "category": "技术",
  "tags": ["数据库", "学习路线"],
  "summary": "MySQL vs Redis vs RocksDB 深度对比学习报告",
  "content": "# **MySQL vs Redis vs RocksDB 深度对比学习报告**\n\n## **一、概述**\nMySQL、Redis 和 RocksDB 是三种不同定位的存储系统，适用于不同的业务场景。本报告从**数据模型、存储引擎、性能特点、适用场景**等多个维度进行对比分析，帮助选择合适的存储方案。\n\n---\n\n## **二、核心对比**\n\n| **特性**| **MySQL (InnoDB)**| **Redis**| **RocksDB**|\n|-------------------|-----------------------------|------------------------------|--------------------------------|\n| **类型**| 关系型数据库 (RDBMS)| 内存型键值数据库 (NoSQL)| 嵌入式持久化键值存储 (NoSQL)|\n| **数据模型**| 表、行、列 (Schema-based)| 键值对 + 多种数据结构| 键值对 (字节数组)|\n| **存储介质**| 磁盘 (内存缓冲池)| 内存 (支持持久化)| 磁盘 (LSM-Tree 优化写入)|\n| **存储引擎**| B+Tree| 多种内存数据结构| LSM-Tree|\n| **事务**| 完整 ACID 事务| 单命令原子性 + Lua 脚本| 单 Key 原子性 + 批处理|\n| **查询能力**| 强大的 SQL (JOIN, 聚合等)| 简单命令 (GET/SET/HASH 等)| 基础 API (Put/Get/Scan)|\n| **持久化**| WAL + 数据文件 (强持久性)| RDB 快照 / AOF 追加日志| WAL + SSTable 文件 (强持久性) |\n| **性能特点**| 读优化，写入随机 I/O 受限| 内存访问，读写极快 (微秒级)| 写入极高吞吐，点查快，范围查需优化 |\n| **扩展性**| 主从复制、分片 (较复杂)| 主从复制 + Redis Cluster| 依赖应用层分片|\n| **主要用途**| 核心业务数据、复杂查询| 缓存、实时排行榜、消息队列| 时序数据、消息存储、嵌入式数据库 |\n\n---\n\n## **三、详细解析**\n\n### **1. 数据模型**\n#### **MySQL (InnoDB)**\n- **关系型模型**，数据存储在表中，支持 SQL 查询。\n- 适合**结构化数据**，如订单、用户信息、财务数据。\n- 支持**索引 (B+Tree)**、**外键约束**、**事务 (ACID)**。\n\n#### **Redis**\n- **键值存储**，但支持多种数据结构：\n- **String**（字符串）\n- **Hash**（哈希表）\n- **List**（列表）\n- **Set**（集合）\n- **Sorted Set**（有序集合）\n- **Stream**（消息流）\n- 适合**缓存、会话存储、实时计算**（如排行榜、计数器）。\n\n#### **RocksDB**\n- **纯键值存储**，Key 和 Value 均为**字节数组**，无数据结构。\n- 适合**顺序写入密集型**场景（如日志、时序数据、消息存储）。\n- 被许多分布式系统（如 TiDB、Kafka Streams）用作底层存储引擎。\n\n---\n\n### **2. 存储引擎与性能**\n#### **MySQL (InnoDB)**\n- **B+Tree 索引**：适合范围查询，但随机写入可能导致页分裂。\n- **Buffer Pool**：缓存热点数据，减少磁盘 I/O。\n- **写入性能**：受限于磁盘随机 I/O，高并发写入可能成为瓶颈。\n\n#### **Redis**\n- **全内存存储**，读写速度极快（微秒级）。\n- **持久化方式**：\n- **RDB**（快照）：定期保存数据，适合备份。\n- **AOF**（日志）：记录每个写命令，可配置不同同步策略。\n- **高并发**：单线程模型避免锁竞争，但 CPU 可能成为瓶颈。\n\n#### **RocksDB**\n- **LSM-Tree (Log-Structured Merge-Tree)**：\n- **写入优化**：追加写 + 后台 Compaction，适合高吞吐写入（如日志、时序数据）。\n- **读取优化**：布隆过滤器（Bloom Filter）减少无效磁盘查找。\n- **压缩支持**：减少存储占用（适合 SSD）。\n- **嵌入式设计**：作为库集成到应用中（无独立服务进程）。\n\n---\n\n### **3. 事务与一致性**\n|| **MySQL**| **Redis**| **RocksDB**|\n|--------------|-------------------------|-------------------------|-------------------------|\n| **事务模型** | 完整 ACID (跨行事务)| 单命令原子性、Lua 脚本| 单 Key 原子性、批处理|\n| **隔离级别** | READ COMMITTED / REPEATABLE READ | 无隔离级别 | 快照隔离 (Snapshot) |\n| **适用场景** | 金融交易、订单处理| 缓存、计数器| 日志、消息存储|\n\n---\n\n### **4. 适用场景对比**\n#### **MySQL**\n✅ **适合**：\n- 需要**强一致性**和**复杂查询**的业务（如电商订单、用户管理）。\n- **OLTP（在线事务处理）** 场景，如银行交易、库存管理。\n\n❌ **不适合**：\n- 超高并发写入（可用 Redis 缓存减轻负担）。\n- 简单 Key-Value 查询（可用 Redis 优化性能）。\n\n#### **Redis**\n✅ **适合**：\n- **缓存加速**（减少 MySQL 查询压力）。\n- **实时计算**（如排行榜、秒杀计数器）。\n- **消息队列**（List / Stream 实现简单队列）。\n\n❌ **不适合**：\n- 存储大量冷数据（内存成本高）。\n- 复杂查询（无 JOIN、聚合能力）。\n\n#### **RocksDB**\n✅ **适合**：\n- **高吞吐写入**（如日志、时序数据、Kafka 存储）。\n- **嵌入式存储**（替代 SQLite 或文件存储）。\n- **分布式系统底层存储**（如 TiDB、Flink State Backend）。\n\n❌ **不适合**：\n- 需要复杂查询或事务（无 SQL 支持）。\n- 需要低延迟点查（不如 Redis 快）。\n\n---\n\n## **四、总结与选型建议**\n| **需求**| **推荐方案**| **理由**|\n|-------------------------|-----------------------|------------------------------------------|\n| 核心业务数据 + 复杂查询 | **MySQL**| 支持 SQL、事务、数据一致性。|\n| 高性能缓存 + 实时计算| **Redis**| 内存存储，超低延迟，多种数据结构。|\n| 高吞吐写入 + 持久化存储 | **RocksDB**| LSM-Tree 优化写入，适合日志、时序数据。|\n| 缓存 + 持久化混合需求| **Redis + MySQL**| Redis 加速查询，MySQL 保证持久化。|\n| 分布式存储底层引擎| **RocksDB**| 被 TiDB、CockroachDB 等采用。|\n\n### **典型架构示例**\n1. **Web 应用缓存架构**\n```\n用户请求 → Redis (缓存热点数据) → MySQL (持久化存储)\n```\n2. **消息处理系统**\n```\n消息队列 (Kafka) → RocksDB (存储消息日志) → 计算引擎 (Flink/Spark)\n```\n3. **时序数据存储**\n```\n传感器数据 → RocksDB (高效写入) → 查询引擎 (Prometheus/InfluxDB)\n```\n\n---\n\n## **五、进一步学习建议**\n- **MySQL**：学习 InnoDB 存储引擎、索引优化、事务隔离级别。\n- **Redis**：掌握数据结构、持久化策略、集群模式（Redis Cluster）。\n- **RocksDB**：理解 LSM-Tree 原理、Compaction 策略、调优参数。\n\n通过本报告，可以清晰理解 MySQL、Redis 和 RocksDB 的核心差异，并根据业务需求选择最合适的存储方案。",
  "image": "code2025-10-30.jpg",
  "isTop": true
}